version: '3'

services:
  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: cdi
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    networks:
      cdi-network: { }
    # Connect command inside the container: psql -h localhost -p 5432 -d marketplace -U admin

  pgbouncer:
    image: edoburu/pgbouncer
    ports:
      - "5432:5432"
    depends_on:
      - postgres
    environment:
      ADMIN_USERS: admin
      DB_HOST: postgres
      DB_USER: admin
      DB_PASSWORD: admin
      DB_NAME: cdi
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 300
      AUTH_TYPE: plain
    networks:
      cdi-network: { }

  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass supersecurepassword
    volumes:
      - redis-data:/data
    networks:
      cdi-network: { }

  controller:
    image: adarshzededa/cdi-controller:latest
    restart: always
    ports:
      - "50000:50000"
    ipc: host
    depends_on:
      - pgbouncer
    build:
      context: ../../
      dockerfile: srvs/controller/Dockerfile
      args:
        - service=controller
    environment:
      SQL_HOST: pgbouncer
      SQL_PORT: 5432
      SQL_USER: admin
      SQL_PASSWORD: admin
      SQL_DB: cdi
      RPC_HOST: "0.0.0.0"
      RPC_PORT: 50000
    user: "999:21"
    networks:
      cdi-network: { }

  minion:
    image: adarshzededa/cdi-minion:latest
    restart: always
    ports:
      - "50001:50001"
    ipc: host
    depends_on:
      - controller
    build:
      context: ../../
      dockerfile: srvs/minion/Dockerfile
      args:
        - service=minion
    environment:
      SQL_HOST: pgbouncer
      SQL_PORT: 5432
      SQL_USER: admin
      SQL_PASSWORD: admin
      SQL_DB: cdi
      RPC_HOST: "0.0.0.0"
      RPC_PORT: 50001
      CONTROLLER_HOST: controller
      CONTROLLER_PORT: 50000
      NODE_IP: "minion"
      CONTAINER_NAME: "minion"
      CONTAINER_IP: "minion"
      CONTAINER_NAMESPACE: "default"
    user: "998:22"
    networks:
      cdi-network: { }

  extractor:
    image: adarshzededa/cdi-extractor:latest
    restart: always
    ports:
      - "50011:50011"
      - "50012:50012"
    ipc: host
    depends_on:
      - minion
      - cache
    build:
      context: ../../
      dockerfile: srvs/extractor/Dockerfile
      args:
        - service=extractor
    environment:
      NODE_IP: "minion"
      PROCESS_ID: "b8269e66-e6d4-4b66-8f1e-acd9715372c9"
      CONTAINER_NAME: "extractor"
      CONTAINER_IP: "extractor"
      CONTAINER_NAMESPACE: "default"
      RPC_HOST: "0.0.0.0"
      RPC_PORT: 50011
      CONTROLLER_HOST: controller
      CONTROLLER_PORT: 50000
      HOST: "0.0.0.0"
      PORT: 50012
      CONFIG_PATH: "/etc/config/process_config.yaml"
      CACHE_DB_HOST: cache
      CACHE_DB_PORT: 6379
      CACHE_DB_PWD: "supersecurepassword"
      LOCAL_BUFFER_DIR: "/tmp"
    user: "997:23"
    networks:
      cdi-network: { }
    volumes:
      - type: bind
        source: ../kube/common_config/process_config.yaml
        target: /etc/config/process_config.yaml

  detector:
    image: adarshzededa/cdi-detector:latest
    restart: always
    ports:
      - "50021:50021"
    ipc: host
    depends_on:
      - minion
      - cache
    build:
      context: ../../
      dockerfile: srvs/detector/Dockerfile
      args:
        - service=detector
    environment:
      NODE_IP: "minion"
      PROCESS_ID: "ebe87a92-8f00-49d7-9133-05bc592a58d5"
      CONTAINER_NAME: "detector"
      CONTAINER_IP: "detector"
      CONTAINER_NAMESPACE: "default"
      RPC_HOST: "0.0.0.0"
      RPC_PORT: 50021
      CONTROLLER_HOST: controller
      CONTROLLER_PORT: 50000
      CONFIG_PATH: "/etc/config/process_config.yaml"
    user: "996:24"
    networks:
      cdi-network: { }
    volumes:
      - type: bind
        source: ../kube/common_config/process_config.yaml
        target: /etc/config/process_config.yaml
#  app_process:
#    image: adarshzededa/cdi-app-process:latest
#    restart: always
#    ports:
#      - "50002:50002"
#    ipc: host
#    depends_on:
#      - controller
#      - minion
#    build:
#      context: ../../
#      dockerfile: srvs/app_process/Dockerfile
#      args:
#        - service=app_process
#    environment:
#      HOST: "0.0.0.0"
#      PORT: 50002
#      CONTROLLER_HOST: controller
#      CONTROLLER_PORT: 50000
#      NODE_IP: "0.0.0.0"
#      PROCESS_ID: "dkjbwlbpwivbu"
#    user: "999:21"
#    networks:
#      cdi-network: { }


volumes:
  postgresql-data:
    driver: local
  redis-data:
    driver: local

networks:
  cdi-network:
    driver: bridge