# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import controller_api_pb2 as controller__api__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in controller_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class ControllerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterProcess = channel.unary_unary(
                '/proto.ControllerService/RegisterProcess',
                request_serializer=controller__api__pb2.RegisterProcessRequest.SerializeToString,
                response_deserializer=controller__api__pb2.RegisterProcessResponse.FromString,
                _registered_method=True)
        self.UnregisterProcess = channel.unary_unary(
                '/proto.ControllerService/UnregisterProcess',
                request_serializer=controller__api__pb2.UnregisterProcessRequest.SerializeToString,
                response_deserializer=controller__api__pb2.UnregisterProcessResponse.FromString,
                _registered_method=True)
        self.RegisterMinion = channel.unary_unary(
                '/proto.ControllerService/RegisterMinion',
                request_serializer=controller__api__pb2.RegisterMinionRequest.SerializeToString,
                response_deserializer=controller__api__pb2.RegisterMinionResponse.FromString,
                _registered_method=True)
        self.UnregisterMinion = channel.unary_unary(
                '/proto.ControllerService/UnregisterMinion',
                request_serializer=controller__api__pb2.UnregisterMinionRequest.SerializeToString,
                response_deserializer=controller__api__pb2.UnregisterMinionResponse.FromString,
                _registered_method=True)
        self.CreateCDIs = channel.unary_unary(
                '/proto.ControllerService/CreateCDIs',
                request_serializer=controller__api__pb2.CreateCDIsRequest.SerializeToString,
                response_deserializer=controller__api__pb2.CreateCDIsResponse.FromString,
                _registered_method=True)
        self.GetCDIsByProcessID = channel.unary_unary(
                '/proto.ControllerService/GetCDIsByProcessID',
                request_serializer=controller__api__pb2.GetCDIsByProcessIDRequest.SerializeToString,
                response_deserializer=controller__api__pb2.GetCDIsByProcessIDResponse.FromString,
                _registered_method=True)
        self.TransferCDIs = channel.unary_unary(
                '/proto.ControllerService/TransferCDIs',
                request_serializer=controller__api__pb2.TransferCDIsRequest.SerializeToString,
                response_deserializer=controller__api__pb2.TransferCDIsResponse.FromString,
                _registered_method=True)
        self.DeleteCDIs = channel.unary_unary(
                '/proto.ControllerService/DeleteCDIs',
                request_serializer=controller__api__pb2.DeleteCDIsRequest.SerializeToString,
                response_deserializer=controller__api__pb2.DeleteCDIsResponse.FromString,
                _registered_method=True)


class ControllerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterMinion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterMinion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCDIs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCDIsByProcessID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferCDIs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCDIs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControllerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterProcess,
                    request_deserializer=controller__api__pb2.RegisterProcessRequest.FromString,
                    response_serializer=controller__api__pb2.RegisterProcessResponse.SerializeToString,
            ),
            'UnregisterProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterProcess,
                    request_deserializer=controller__api__pb2.UnregisterProcessRequest.FromString,
                    response_serializer=controller__api__pb2.UnregisterProcessResponse.SerializeToString,
            ),
            'RegisterMinion': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterMinion,
                    request_deserializer=controller__api__pb2.RegisterMinionRequest.FromString,
                    response_serializer=controller__api__pb2.RegisterMinionResponse.SerializeToString,
            ),
            'UnregisterMinion': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterMinion,
                    request_deserializer=controller__api__pb2.UnregisterMinionRequest.FromString,
                    response_serializer=controller__api__pb2.UnregisterMinionResponse.SerializeToString,
            ),
            'CreateCDIs': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCDIs,
                    request_deserializer=controller__api__pb2.CreateCDIsRequest.FromString,
                    response_serializer=controller__api__pb2.CreateCDIsResponse.SerializeToString,
            ),
            'GetCDIsByProcessID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCDIsByProcessID,
                    request_deserializer=controller__api__pb2.GetCDIsByProcessIDRequest.FromString,
                    response_serializer=controller__api__pb2.GetCDIsByProcessIDResponse.SerializeToString,
            ),
            'TransferCDIs': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferCDIs,
                    request_deserializer=controller__api__pb2.TransferCDIsRequest.FromString,
                    response_serializer=controller__api__pb2.TransferCDIsResponse.SerializeToString,
            ),
            'DeleteCDIs': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCDIs,
                    request_deserializer=controller__api__pb2.DeleteCDIsRequest.FromString,
                    response_serializer=controller__api__pb2.DeleteCDIsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.ControllerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ControllerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ControllerService/RegisterProcess',
            controller__api__pb2.RegisterProcessRequest.SerializeToString,
            controller__api__pb2.RegisterProcessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnregisterProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ControllerService/UnregisterProcess',
            controller__api__pb2.UnregisterProcessRequest.SerializeToString,
            controller__api__pb2.UnregisterProcessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterMinion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ControllerService/RegisterMinion',
            controller__api__pb2.RegisterMinionRequest.SerializeToString,
            controller__api__pb2.RegisterMinionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnregisterMinion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ControllerService/UnregisterMinion',
            controller__api__pb2.UnregisterMinionRequest.SerializeToString,
            controller__api__pb2.UnregisterMinionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCDIs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ControllerService/CreateCDIs',
            controller__api__pb2.CreateCDIsRequest.SerializeToString,
            controller__api__pb2.CreateCDIsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCDIsByProcessID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ControllerService/GetCDIsByProcessID',
            controller__api__pb2.GetCDIsByProcessIDRequest.SerializeToString,
            controller__api__pb2.GetCDIsByProcessIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransferCDIs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ControllerService/TransferCDIs',
            controller__api__pb2.TransferCDIsRequest.SerializeToString,
            controller__api__pb2.TransferCDIsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCDIs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ControllerService/DeleteCDIs',
            controller__api__pb2.DeleteCDIsRequest.SerializeToString,
            controller__api__pb2.DeleteCDIsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
