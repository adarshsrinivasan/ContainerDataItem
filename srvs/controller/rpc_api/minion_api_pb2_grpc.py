# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import minion_api_pb2 as minion__api__pb2


class MinionControllerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCDIs = channel.unary_unary(
                '/proto.MinionControllerService/CreateCDIs',
                request_serializer=minion__api__pb2.MinionCreateCDIsRequest.SerializeToString,
                response_deserializer=minion__api__pb2.MinionCreateCDIsResponse.FromString,
                )
        self.UpdateCDIs = channel.unary_unary(
                '/proto.MinionControllerService/UpdateCDIs',
                request_serializer=minion__api__pb2.MinionUpdateCDIsRequest.SerializeToString,
                response_deserializer=minion__api__pb2.MinionUpdateCDIsResponse.FromString,
                )
        self.TransferAndDeleteCDIs = channel.unary_unary(
                '/proto.MinionControllerService/TransferAndDeleteCDIs',
                request_serializer=minion__api__pb2.MinionTransferAndDeleteCDIsRequest.SerializeToString,
                response_deserializer=minion__api__pb2.MinionTransferAndDeleteCDIsResponse.FromString,
                )
        self.DeleteCDIs = channel.unary_unary(
                '/proto.MinionControllerService/DeleteCDIs',
                request_serializer=minion__api__pb2.MinionDeleteCDIsRequest.SerializeToString,
                response_deserializer=minion__api__pb2.MinionDeleteCDIsResponse.FromString,
                )


class MinionControllerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCDIs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCDIs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferAndDeleteCDIs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCDIs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MinionControllerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCDIs': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCDIs,
                    request_deserializer=minion__api__pb2.MinionCreateCDIsRequest.FromString,
                    response_serializer=minion__api__pb2.MinionCreateCDIsResponse.SerializeToString,
            ),
            'UpdateCDIs': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCDIs,
                    request_deserializer=minion__api__pb2.MinionUpdateCDIsRequest.FromString,
                    response_serializer=minion__api__pb2.MinionUpdateCDIsResponse.SerializeToString,
            ),
            'TransferAndDeleteCDIs': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferAndDeleteCDIs,
                    request_deserializer=minion__api__pb2.MinionTransferAndDeleteCDIsRequest.FromString,
                    response_serializer=minion__api__pb2.MinionTransferAndDeleteCDIsResponse.SerializeToString,
            ),
            'DeleteCDIs': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCDIs,
                    request_deserializer=minion__api__pb2.MinionDeleteCDIsRequest.FromString,
                    response_serializer=minion__api__pb2.MinionDeleteCDIsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.MinionControllerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MinionControllerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCDIs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.MinionControllerService/CreateCDIs',
            minion__api__pb2.MinionCreateCDIsRequest.SerializeToString,
            minion__api__pb2.MinionCreateCDIsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCDIs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.MinionControllerService/UpdateCDIs',
            minion__api__pb2.MinionUpdateCDIsRequest.SerializeToString,
            minion__api__pb2.MinionUpdateCDIsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransferAndDeleteCDIs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.MinionControllerService/TransferAndDeleteCDIs',
            minion__api__pb2.MinionTransferAndDeleteCDIsRequest.SerializeToString,
            minion__api__pb2.MinionTransferAndDeleteCDIsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCDIs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.MinionControllerService/DeleteCDIs',
            minion__api__pb2.MinionDeleteCDIsRequest.SerializeToString,
            minion__api__pb2.MinionDeleteCDIsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
