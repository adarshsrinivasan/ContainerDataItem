# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import process_api_pb2 as process__api__pb2


class ProcessServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NotifyCDIsAccess = channel.unary_unary(
                '/proto.ProcessService/NotifyCDIsAccess',
                request_serializer=process__api__pb2.NotifyCDIsAccessRequest.SerializeToString,
                response_deserializer=process__api__pb2.NotifyCDIsAccessResponse.FromString,
                )
        self.TransferPayload = channel.unary_unary(
                '/proto.ProcessService/TransferPayload',
                request_serializer=process__api__pb2.TransferPayloadRequest.SerializeToString,
                response_deserializer=process__api__pb2.TransferPayloadResponse.FromString,
                )


class ProcessServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NotifyCDIsAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferPayload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProcessServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NotifyCDIsAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyCDIsAccess,
                    request_deserializer=process__api__pb2.NotifyCDIsAccessRequest.FromString,
                    response_serializer=process__api__pb2.NotifyCDIsAccessResponse.SerializeToString,
            ),
            'TransferPayload': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferPayload,
                    request_deserializer=process__api__pb2.TransferPayloadRequest.FromString,
                    response_serializer=process__api__pb2.TransferPayloadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.ProcessService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProcessService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NotifyCDIsAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.ProcessService/NotifyCDIsAccess',
            process__api__pb2.NotifyCDIsAccessRequest.SerializeToString,
            process__api__pb2.NotifyCDIsAccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransferPayload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.ProcessService/TransferPayload',
            process__api__pb2.TransferPayloadRequest.SerializeToString,
            process__api__pb2.TransferPayloadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
